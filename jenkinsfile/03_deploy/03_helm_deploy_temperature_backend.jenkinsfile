pipeline {
    agent {
        label "local-build"
    }

    environment {
        GIT_USERNAME = 'git'
        GIT_REPO_DEPLOYMENT = "${env.GIT_REPO}/deployment.git"
        GIT_REPO_CONFIG = "${env.GIT_REPO}/config.git"
        // Docker Login
        DOCKER_LOGIN = credentials('DOCKER_USER')
    }
    
    stages {
        stage('Clone deployment repository'){
            steps{
                dir('deployment'){
                    git branch: 'master',
                    credentialsId: 'SSH_Key',
                    url: "${env.GIT_USERNAME}@${env.GIT_REPO_DEPLOYMENT}"
                    
                }
                
            }
        }
        
        stage('Checkout config'){
            steps{
                dir('config'){
                    git branch: 'master',
                    credentialsId: 'SSH_Key',
                    url: "${env.GIT_USERNAME}@${env.GIT_REPO_CONFIG}"                    
                }
            }
        }

        stage('Run Helm deployment'){
            steps{
                sh """
                    helm upgrade -i ${env.ENVIRONMENT}-backend deployment/helm/RoomAppsBackend -f ./config/helm/RoomApps/${env.ENVIRONMENT}/backend_values.yaml --set roomworker.version=${env.BUILD_ROOMWORKER} --set roomstatus.version=${env.BUILD_ROOMSTATUS} --set roomobserver.version=${env.BUILD_ROOMOBSERVER}
                """
            }
        }
    }

    post {
        always {
            withCredentials([string(credentialsId: 'TelegramChatID', variable: 'CHAT_ID'), string(credentialsId: 'TelegramBotToken', variable: 'BOT_TOKEN')]) {
                callTelegram("${currentBuild.currentResult}", "${env.JOB_NAME}", "${env.BUILD_ID}")
            }
            
        }
    }
}

