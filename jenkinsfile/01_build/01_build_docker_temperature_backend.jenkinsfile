pipeline {
    agent {
        label "local-build"
    }
    
    tools { 
        jdk 'java11'
        maven 'MAVEN_3_8_2'
    }
    
    environment {         
        mvnHome = tool 'MAVEN_3_8_2'
        LC_ALL = 'en_US.UTF-8'         
        LANG    = 'en_US.UTF-8'         
        LANGUAGE = 'en_US.UTF-8' 
        // Nexus parameters
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "${env.NEXUS_REPO}"
        NEXUS_REPOSITORY = "home"
        NEXUS_CREDENTIAL_ID = "nexus"
        // Container Image to build
        PADDED_BUILDNUMBER=padBuildNumber("${env.BUILD_NUMBER}")
        CONTAINER_IMAGE_OBSERVER = "${env.DOCKER_REPO}/roomobserver:$PADDED_BUILDNUMBER"
        CONTAINER_IMAGE_OBSERVER_MQ = "${env.DOCKER_REPO}/roomobserver_mq:$PADDED_BUILDNUMBER"
        CONTAINER_IMAGE_STATUS = "${env.DOCKER_REPO}/roomstatus:$PADDED_BUILDNUMBER"
        CONTAINER_IMAGE_WORKER = "${env.DOCKER_REPO}/roomworker:$PADDED_BUILDNUMBER"
        // Docker Login
        DOCKER_LOGIN = credentials('DOCKER_USER')
        // Remaining environment variables are set under 
        // Manage Jenkins > Configure System > Global properties > Environment variables
    }

    stages {
        stage('Clean working directory'){
            steps{
                sh "rm -f -R ${env.WORKSPACE}/*"
            }
        }
        
        stage('Checkout SCM') {
            steps {
                git branch: 'master',
                credentialsId: 'SSH_Key',
                url: "git@${env.GIT_REPO}/temperatur_master_java.git"
            }
        }
        
        stage('Build binarys'){
            steps {
                sh """
                    cd RoomApps
                    . ~/.bashrc
                    env
                    whoami
                    mvn -B install"""
            }
        }

        stage('Sonarqube'){
            steps {
                withSonarQubeEnv(credentialsId: 'Sonarqube', installationName: 'local-sonar') {
                    sh """
                        cd RoomApps
                        mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar
                    """
                }
            }
        }
        
        stage('Build containers'){
            steps {
                sh """
                    cd RoomApps
                    cd RoomWorker
                    docker login ${env.DOCKER_REPO} -u ${env.DOCKER_LOGIN_USR} -p ${env.DOCKER_LOGIN_PSW}
                    docker build -t ${env.CONTAINER_IMAGE_WORKER} --build-arg JAR_FILE=target/RoomWorker-spring-boot.jar -f dockerfile .
                    docker tag ${env.CONTAINER_IMAGE_WORKER} ${env.CONTAINER_IMAGE_WORKER}
                """
                sh """
                    cd RoomApps
                    cd RoomStatus
                    docker login ${env.DOCKER_REPO} -u ${env.DOCKER_LOGIN_USR} -p ${env.DOCKER_LOGIN_PSW}
                    docker build -t ${env.CONTAINER_IMAGE_STATUS} --build-arg JAR_FILE=target/RoomStatus-spring-boot.jar -f dockerfile .
                    docker tag ${env.CONTAINER_IMAGE_STATUS} ${env.CONTAINER_IMAGE_STATUS}
                """
                sh """
                    cd RoomApps
                    cd RoomObserver
                    docker login ${env.DOCKER_REPO} -u ${env.DOCKER_LOGIN_USR} -p ${env.DOCKER_LOGIN_PSW}
                    docker build -t ${env.CONTAINER_IMAGE_OBSERVER} --build-arg JAR_FILE=target/RoomObserver-spring-boot.jar -f dockerfile .
                    docker tag ${env.CONTAINER_IMAGE_OBSERVER} ${env.CONTAINER_IMAGE_OBSERVER}
                """
                sh """
                    cd RoomApps
                    cd RoomObserverMQ
                    docker login ${env.DOCKER_REPO} -u ${env.DOCKER_LOGIN_USR} -p ${env.DOCKER_LOGIN_PSW}
                    docker build -t ${env.CONTAINER_IMAGE_OBSERVER_MQ} --build-arg JAR_FILE=target/RoomObserverMQ-1.0.jar -f dockerfile .
                    docker tag ${env.CONTAINER_IMAGE_OBSERVER_MQ} ${env.CONTAINER_IMAGE_OBSERVER_MQ}
                """
            }
        }
        
        stage('Push container'){
            steps {
                sh """
                    docker login ${env.DOCKER_REPO} -u ${env.DOCKER_LOGIN_USR} -p ${env.DOCKER_LOGIN_PSW}
                    docker push ${env.CONTAINER_IMAGE_WORKER}
                    docker push ${env.CONTAINER_IMAGE_STATUS}
                    docker push ${env.CONTAINER_IMAGE_OBSERVER}
                    docker push ${env.CONTAINER_IMAGE_OBSERVER_MQ}
                """
            }
        }
    }

    post {
        always {
            withCredentials([string(credentialsId: 'TelegramChatID', variable: 'CHAT_ID'), string(credentialsId: 'TelegramBotToken', variable: 'BOT_TOKEN')]) {
                callTelegram("${currentBuild.currentResult}", "${env.JOB_NAME}", "${env.BUILD_ID}")
            }
        }
    }
}


def padBuildNumber(String number) {
    return number.padLeft(4,'0')
}